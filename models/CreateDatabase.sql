create schema journey;

use journey;

CREATE TABLE CATEGORIA_USUARIO (
    ID_CATEGORIA NUMERIC PRIMARY KEY,
    DESCRICAO VARCHAR(244)
);

CREATE TABLE USUARIO (
    CPF NUMERIC(11) PRIMARY KEY,
    ID_USUARIO NUMERIC,
    MATRICULA NUMERIC,
    EMAIL VARCHAR(244),
    NOME VARCHAR(244),
    TURNO NUMERIC,
    SOBRENOME VARCHAR(244),
    TIPO_USUARIO NUMERIC,
    SENHA VARCHAR(244),
    TOKEN VARCHAR(8),
    ID_CATEGORIA NUMERIC,
    ID_CURSO NUMERIC
);

CREATE TABLE CURSO (
    ID_CURSO NUMERIC PRIMARY KEY,
    DESCRICAO VARCHAR(244)
);

CREATE TABLE EVENTO (
    ID_EVENTO NUMERIC PRIMARY KEY,
    TITULO VARCHAR(244),
    DT_INICIO DATE,
    DT_FIM DATE,
    HORARIO DATETIME,
    LOCAL VARCHAR(244)
);

CREATE TABLE SEMINARIO (
    ID_SEMINARIO NUMERIC PRIMARY KEY,
    ID_USUARIO_PALESTRANTE NUMERIC,
    TITULO VARCHAR(244),
    DESCRICAO VARCHAR(244),
    DATA DATE,
    HORARIO DATETIME,
    LOCAL VARCHAR(244),
    ID_SALA NUMERIC,
    ID_CATEGORIA_SEMINARIO NUMERIC,
    ID_EVENTO NUMERIC
);

CREATE TABLE USUARIO_SEMINARIO (
    CPF_USUARIO NUMERIC(11),
    ID_SEMINARIO NUMERIC,
    PRESENCA NUMERIC,
    DATA_INSCRICAO DATE
);

CREATE TABLE SALA (
    ID_SALA NUMERIC PRIMARY KEY,
    NOME_SALA VARCHAR(244),
    CAPACIDADE NUMERIC
);

CREATE TABLE CATEGORIA_SEMINARIO (
    ID NUMERIC PRIMARY KEY,
    DESCRICAO VARCHAR(244)
);

CREATE TABLE COMUNICADO (
    SEQ NUMERIC UNIQUE,
    COMUNICADO VARCHAR(244),
    ID_PALESTRA NUMERIC
);
 
ALTER TABLE USUARIO ADD CONSTRAINT FK_ID_CATEGORIA_USUARIO
    FOREIGN KEY (ID_CATEGORIA)
    REFERENCES CATEGORIA_USUARIO (ID_CATEGORIA)
    ON DELETE CASCADE;
 
ALTER TABLE USUARIO ADD CONSTRAINT FK_ID_CURSO
    FOREIGN KEY (ID_CURSO)
    REFERENCES CURSO (ID_CURSO)
    ON DELETE SET NULL;
 
ALTER TABLE SEMINARIO ADD CONSTRAINT FK_ID_SALA
    FOREIGN KEY (ID_SALA)
    REFERENCES SALA (ID_SALA)
    ON DELETE SET NULL;
 
ALTER TABLE SEMINARIO ADD CONSTRAINT FK_ID_CATEGORIA_SEMINARIO
    FOREIGN KEY (ID_CATEGORIA_SEMINARIO)
    REFERENCES CATEGORIA_SEMINARIO (ID)
    ON DELETE SET NULL;
 
ALTER TABLE SEMINARIO ADD CONSTRAINT FK_ID_EVENTO
    FOREIGN KEY (ID_EVENTO)
    REFERENCES EVENTO (ID_EVENTO)
    ON DELETE CASCADE;
 
ALTER TABLE USUARIO_SEMINARIO ADD CONSTRAINT FK_USUARIO
    FOREIGN KEY (CPF_USUARIO)
    REFERENCES USUARIO (CPF)
    ON DELETE RESTRICT;
 
ALTER TABLE USUARIO_SEMINARIO ADD CONSTRAINT FK_SEMINARIO
    FOREIGN KEY (ID_SEMINARIO)
    REFERENCES SEMINARIO (ID_SEMINARIO)
    ON DELETE RESTRICT;
 
ALTER TABLE COMUNICADO ADD CONSTRAINT FK_ID_SEMINARIO
    FOREIGN KEY (ID_PALESTRA)
    REFERENCES SEMINARIO (ID_SEMINARIO)
    ON DELETE RESTRICT;

-- Caso ao tentar executar os deletes e de o erro de "safe update" é só desativar isso.. > configuracoes (canto direito superior) > SQL Editor > rola para baixo e terá a última opcao (Safe Updates) ai é só desmarcar.
DELETE FROM COMUNICADO;
DELETE FROM USUARIO_SEMINARIO;
DELETE FROM SEMINARIO;
DELETE FROM EVENTO;
DELETE FROM CATEGORIA_SEMINARIO;
DELETE FROM SALA;
DELETE FROM USUARIO;
DELETE FROM CURSO;
DELETE FROM CATEGORIA_USUARIO;


DROP TABLE IF EXISTS COMUNICADO;
DROP TABLE IF EXISTS USUARIO_SEMINARIO;
DROP TABLE IF EXISTS SEMINARIO;
DROP TABLE IF EXISTS EVENTO;
DROP TABLE IF EXISTS CATEGORIA_SEMINARIO;
DROP TABLE IF EXISTS SALA;
DROP TABLE IF EXISTS USUARIO;
DROP TABLE IF EXISTS CURSO;
DROP TABLE IF EXISTS CATEGORIA_USUARIO;

-- INSERINDO ALGUNS DADOS
/* Populando a tabela CATEGORIA_USUARIO */
INSERT INTO CATEGORIA_USUARIO (ID_CATEGORIA, DESCRICAO) VALUES
(1, 'Estudante'),
(2, 'Professor'),
(3, 'Palestrante');

/* Populando a tabela CURSO */
INSERT INTO CURSO (ID_CURSO, DESCRICAO) VALUES
(1, 'Engenharia de Software'),
(2, 'Ciência da Computação');

/* Populando a tabela USUARIO */
INSERT INTO USUARIO (CPF, ID_USUARIO, MATRICULA, EMAIL, NOME, TURNO, SOBRENOME, TIPO_USUARIO, SENHA, TOKEN, ID_CATEGORIA, ID_CURSO) VALUES
(12345678901, 1, 1001, 'joao@example.com', 'João', 1, 'Silva', 1, 'senha123', 'token123', 1, 1),
(23456789012, 2, 1002, 'maria@example.com', 'Maria', 1, 'Santos', 1, 'senha456', 'token456', 1, 1),
(34567890123, 3, 1003, 'carlos@example.com', 'Carlos', 2, 'Oliveira', 1, 'senha789', 'token789', 1, 2);

/* Populando a tabela SALA */
INSERT INTO SALA (ID_SALA, NOME_SALA, CAPACIDADE) VALUES
(1, 'Sala A', 50),
(2, 'Sala B', 100);

/* Populando a tabela CATEGORIA_SEMINARIO */
INSERT INTO CATEGORIA_SEMINARIO (ID, DESCRICAO) VALUES
(1, 'Tecnologia'),
(2, 'Negócios');

/* Populando a tabela EVENTO */
INSERT INTO EVENTO (ID_EVENTO, TITULO, DT_INICIO, DT_FIM, HORARIO, LOCAL) VALUES
(1, 'Conferência de TI 2024', '2024-07-15', '2024-07-17', '2024-05-09 15:30:00', 'Centro de Convenções'),
(2, 'Seminário de Desenvolvimento Web', '2024-08-20', '2024-08-21', '2024-05-09 15:30:00', 'Universidade XYZ');

/* Populando a tabela SEMINARIO */
INSERT INTO SEMINARIO (ID_SEMINARIO, ID_USUARIO_PALESTRANTE, TITULO, DESCRICAO, DATA, HORARIO, LOCAL, ID_SALA, ID_CATEGORIA_SEMINARIO, ID_EVENTO) VALUES
(1, 3, 'Introdução ao Machine Learning', 'Conceitos fundamentais e aplicações práticas de Machine Learning', '2024-07-16', '2024-05-09 15:30:00', 'Sala 101', 1, 1, 1),
(2, 3, 'Desenvolvimento Ágil de Software', 'Metodologias ágeis como Scrum e Kanban', '2024-08-20', '2024-05-09 15:30:00', 'Sala 201', 2, 1, 2);

/* Populando a tabela USUARIO_SEMINARIO */
INSERT INTO USUARIO_SEMINARIO (CPF_USUARIO, ID_SEMINARIO, PRESENCA, DATA_INSCRICAO) VALUES
(12345678901, 1, 1, '2024-07-10'),
(23456789012, 1, 1, '2024-07-11'),
(34567890123, 2, 1, '2024-08-01');

/* Populando a tabela COMUNICADO */
INSERT INTO COMUNICADO (SEQ, COMUNICADO, ID_PALESTRA) VALUES
(1, 'Haverá intervalo para café após a palestra.', 1),
(2, 'Traga suas dúvidas para discussão no final.', 2);

-- Vou deixar algumas consultas básicas aqui

-- Selecionar todos os usuários:
SELECT * FROM USUARIO;

-- Contar o número de eventos:
SELECT COUNT(*) AS total_eventos FROM EVENTO;

-- Listar os seminários com seus palestrantes e locais:
SELECT
	s.TITULO
    ,u.NOME AS palestrante
    ,s.LOCAL
FROM SEMINARIO s
INNER JOIN USUARIO u ON s.ID_USUARIO_PALESTRANTE = u.ID_USUARIO;

-- Encontrar os usuários que se inscreveram em seminários:
SELECT
	u.NOME
    ,s.TITULO AS seminario
FROM USUARIO u
INNER JOIN USUARIO_SEMINARIO us ON u.CPF = us.CPF_USUARIO
INNER JOIN SEMINARIO s ON us.ID_SEMINARIO = s.ID_SEMINARIO;

-- Listar os comunicados associados aos seminários:
SELECT
	c.COMUNICADO
    ,s.TITULO AS seminario
    ,s.ID_SEMINARIO AS ID_SEMINARIO
FROM COMUNICADO c
INNER JOIN SEMINARIO s ON c.ID_PALESTRA = s.ID_SEMINARIO;

